#!/bin/bash

set -euxo pipefail

TEST_CONFIG=${TEST_CONFIG:-./test-config.sh}
. "$TEST_CONFIG"

# We run a test per primary and sub key, so first count how many we have
total_keys=0
for keyring in "${ALL_KEYRINGS[@]}"; do
    num_keys=$(${GPG} --show-keys --with-colons "${builddir}/${keyring}" | \
        grep -c -E '^(pub|sub):')
    let total_keys+=num_keys
done

echo "1..${total_keys}"

# All keys should expire no less than 5 years from now
min_expire_time=$((60 * 60 * 24 * 365 * 5))
now=$(date +%s)
min_expire_date=$((now + min_expire_time))

# Find the expiration for each key in the keyring and make sure it's
# greater than the minimum time.
#
# https://git.gnupg.org/cgi-bin/gitweb.cgi?p=gnupg.git;a=blob_plain;f=doc/DETAILS
for keyring in "${ALL_KEYRINGS[@]}"; do
    listing=$(${GPG} --show-keys --with-colons "${builddir}/${keyring}")
    while IFS=: read -a fields; do
        # Only look for pub and sub records
        key_type=${fields[0]}
        case "${key_type}" in
            pub|sub)
                ;;
            *)
                continue
                ;;
        esac

        # Key ID is in the 5th field
        key_id=${fields[4]}

        # Expiration is in the 7th field
        expiration=${fields[6]}

        # Compare to the minimum expiration date. A non-existent
        # expiration means it never expires.
        if [ -z "${expiration}" ] || \
            [ ${expiration} -ge ${min_expire_date} ]
        then
            echo "ok ${keyring} ${key_type} key ${key_id}"
        else
            # FIXME: Mark failures with TODO so that they become XFAIL
            # until all keys are updated to meet the 5 year policy
            echo "not ok ${keyring} ${key_type} key ${key_id} # TODO update key expiration"
        fi
    done <<< "${listing}"
done
